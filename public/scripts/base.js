// Generated by CoffeeScript 1.7.1
(function() {
  var BaseView, TemplatedView, addUrlParameters, renderTemplate, templateCache,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseView = (function(_super) {
    __extends(BaseView, _super);

    function BaseView() {
      return BaseView.__super__.constructor.apply(this, arguments);
    }

    BaseView.prototype.closed = false;

    BaseView.prototype.subviews = null;

    BaseView.prototype.initialize = function() {
      return this.subviews = [];
    };

    BaseView.prototype.onClose = function() {};

    BaseView.prototype.clearSubviews = function() {
      var subview, _i, _len, _ref;
      _ref = this.subviews;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        subview = _ref[_i];
        subview.close();
      }
      return this.subviews = [];
    };

    BaseView.prototype.addSubview = function(view) {
      this.subviews.push(view);
      return view.render();
    };

    BaseView.prototype.close = function() {
      this.clearSubviews();
      this.remove();
      this.unbind();
      this.onClose();
      return this.closed = true;
    };

    return BaseView;

  })(Backbone.View);

  TemplatedView = (function(_super) {
    __extends(TemplatedView, _super);

    function TemplatedView() {
      return TemplatedView.__super__.constructor.apply(this, arguments);
    }

    TemplatedView.prototype.templateArgs = function() {
      return {};
    };

    TemplatedView.prototype.render = function() {
      return this.$el.html(renderTemplate(this.templateName, this.templateArgs()));
    };

    return TemplatedView;

  })(BaseView);

  templateCache = {};

  renderTemplate = function(name, args) {
    var template;
    template = templateCache[name];
    if (template === void 0) {
      templateCache[name] = template = _.template($("#" + name).html());
    }
    return template(args);
  };

  addUrlParameters = function(url, params) {
    var index, key, paramString, paramStrings, value;
    params = params || {};
    if (_.isEmpty(params)) {
      return url;
    }
    paramStrings = (function() {
      var _results;
      _results = [];
      for (key in params) {
        value = params[key];
        if (value !== void 0) {
          _results.push("" + (encodeURIComponent(key)) + "=" + (encodeURIComponent(value)));
        }
      }
      return _results;
    })();
    paramString = paramStrings.join("&");
    index = url.indexOf("?");
    if (index < 0) {
      return url + "?" + paramString;
    } else if (index === url.length - 1) {
      return url + paramString;
    } else {
      return url + "&" + paramString;
    }
  };

  this.BaseView = BaseView;

  this.TemplatedView = TemplatedView;

  this.renderTemplate = renderTemplate;

  this.addUrlParameters = addUrlParameters;

}).call(this);

//# sourceMappingURL=base.map
